import glob as gb
import os
import warnings
import pandas as pd
import xlwings as xw # Xlwings is a Python library that makes it easy to call Python from Excel
# used to filter out warning messages generated by modules or functions called in your code.
warnings.filterwarnings("ignore")

# function to Calculate the total power consumption of lighting equipment
def powerLighting(lvb_df):
    light = lvb_df['LIGHTS(WATT / SOFT)'].to_list()
    total_power = 0
    for i in range(0, len(light)):
        total_power = total_power + light[i]
    return total_power

# function to Calculate the total equipment consumption
def equipment(lvb_df):
    equip = lvb_df['EQUIP(WATT / SOFT)'].to_list()
    total_equip = 0
    for i in range(0, len(equip)):
        total_equip = total_equip + equip[i]
    return total_equip

# function to Calculate the total people
def people(lvb_df):
    peop = lvb_df['PEOPLE'].to_list()
    total_people = 0
    for i in range(0, len(peop)):
        total_people = total_people + peop[i]
    return total_people

# function to Calculate the total above_area 
def _total_above_area_Info(lvb_df):
    lvb_df['HEIGHT'] = pd.to_numeric(lvb_df['HEIGHT'])
    height = lvb_df['HEIGHT'].to_list()
    SA = []
    total_above_area = 0
    for i in range(0, len(height)):
        if height[i] > 6:
            SA.append(1)
            total_above_area = total_above_area + lvb_df['AREA'][i]
        else:
            SA.append(0)
    return total_above_area

# function get LVB report and compare with lvd report in case of: AG(Above Grade Area) and BG(Below Grade Area) area. 
def get_LVB_report(name, path):
    # Open the file named 'name' and read its contents
    with open(name) as f:
        # Read all lines from the file and store them in a list named flist
        flist = f.readlines()

        # Initialize an empty list to store line numbers where 'LV-B' occurs
        lvb_count = [] 
        # Iterate through each line in flist along with its line number
        for num, line in enumerate(flist, 0):
            # If 'LV-B' is in the line, append its line number to lvb_count list
            if 'LV-B' in line:
                lvb_count.append(num)
            # If 'LV-C' is in the line, store its line number as numend
            if 'LV-C' in line:
                numend = num
        # Store the line number of the first occurrence of 'LV-B'
        numstart = lvb_count[0] 
        # Slice flist from the start of 'LV-B' to the line before 'LV-C' and store it in lvb_rpt
        lvb_rpt = flist[numstart:numend]
        
        lvb_str = []
        # Iterate through each line in lvb_rpt
        for line in lvb_rpt:
            # Check conditions and append lines containing relevant data to lvb_str list
            if (('NO-INFILT.' in line and 'INT' in line) or ('NO-INFILT.' in line and 'EXT' in line) or
                ('AIR-CHANGE' in line and 'INT' in line) or ('AIR-CHANGE' in line and 'EXT' in line)):
                lvb_str.append(line)       
        
        # result list to store filtered columns. after 10th column from last remaining values in 1 column.
        result = []  
        for line in lvb_str:
            lvb_list = []
            # Split the line by whitespace and store the result in splitter
            splitter = line.split()
            # Join the first part of the splitter except the last 10 elements and store it as space_name
            space_name = " ".join(splitter[:-10])
            # Add space_name as the first element of lvb_list
            lvb_list=splitter[-10:]
            lvb_list.insert(0,space_name)
            # Append lvb_list to result
            result.append(lvb_list)
            
        # strore list to dataframe
        lvb_df = pd.DataFrame(result) 
        # Allot lvb_df columns from sim file
        lvb_df.columns = ['SPACE', 'SPACE*FLOOR', 'SPACE_TYPE', 'AZIMUTH', 
                             'LIGHTS(WATT / SOFT)', 'PEOPLE', 'EQUIP(WATT / SOFT)', 'INFILTRATION_METHOD', 'ACH',
                             'AREA', 'VOLUME']
        
        # convert below columns of lvb_df to numeric datatypes
        lvb_df['AREA'] = pd.to_numeric(lvb_df['AREA'])
        lvb_df['VOLUME'] = pd.to_numeric(lvb_df['VOLUME'])
        lvb_df['SPACE*FLOOR'] = pd.to_numeric(lvb_df['SPACE*FLOOR'])
        lvb_df['LIGHTS(WATT / SOFT)'] = pd.to_numeric(lvb_df['LIGHTS(WATT / SOFT)'])
        lvb_df['EQUIP(WATT / SOFT)'] = pd.to_numeric(lvb_df['EQUIP(WATT / SOFT)'])
        lvb_df['PEOPLE'] = pd.to_numeric(lvb_df['PEOPLE'])

        lvb_df['HEIGHT'] = lvb_df['VOLUME'] / lvb_df['AREA']
        # Set the index name of lvb_df to name
        lvb_df.index.name = name
        # Extract the filename from the path and store it in name
        value_before_backslash = ''.join(reversed(name)).split("\\")[0]
        name1 = ''.join(reversed(value_before_backslash))
        name = name1.rsplit(".", 1)[0]
        # Insert a new column named 'RUNNAME' containing the filename
        lvb_df.insert(0, 'RUNNAME', name)
    
         # Get a list of all files ending with '_lvb.csv' and '_lvd.csv' in the specified path
        lvbfiles = gb.glob(f'{path}/*_lvb.csv', recursive=True)
        lvdfiles = gb.glob(f'{path}/*_lvd.csv', recursive=True)

        # Iterate through lvbfiles and lvdfiles simultaneously using zip
        for lvbfile, lvdfile in zip(lvbfiles, lvdfiles):
            # Read the data from lvbfile and lvdfile into pandas DataFrames
            lvb_data = pd.read_csv(lvbfile)
            lvd_data = pd.read_csv(lvdfile)

            # Select relevant columns from lvb_data and lvd_data and drop duplicate rows
            ans1 = lvb_data[['SPACE']]
            ans2 = lvd_data[['SPACE', 'Grade-Expression']].drop_duplicates()

            # Convert selected columns to lists
            l1 = ans1['SPACE'].to_list()
            l2 = ans2['SPACE'].to_list()
            k = ans2['Grade-Expression'].to_list()

            # Ensure the length of list k matches with list l1
            for i in range(0, len(l1) - len(k)):
                k.append('BG')
            # Initialize an empty list named l3
            l3 = []
            # Match spaces in l1 with l2 and assign corresponding values from k to l3
            for i in range(0,len(l1)):
                found = False
                for j in range(0,len(l2)):
                    if l1[i] in l2[j]:
                        l3.append(k[j])
                        found = True
                        break
                if not found:
                    l3.append('AG')
            # Add 'Grade-Expression' column to lvb_data
            lvb_data['Grade-Expression'] = l3

            # Area Total
            areaTot = []
            for i in range(0, len(l3)):
                areaTot.append(lvb_data['AREA'][i]*lvb_data['SPACE*FLOOR'][i])
            lvb_data['Area-Total'] = areaTot

            # Lighting Power Total
            lightTot = []
            totLightPower = 0
            for j in range(0, len(l3)):
                lightTot.append(lvb_data['LIGHTS(WATT / SOFT)'][j]*lvb_data['Area-Total'][j])
                totLightPower = totLightPower + lightTot[j]
            lvb_data['Lighting-Power-Total'] = lightTot

            # Equipment Total
            equipTot = []
            totalEquip = 0
            for k in range(0, len(l3)):
                equipTot.append(lvb_data['EQUIP(WATT / SOFT)'][k]*lvb_data['Area-Total'][k])
                totalEquip = totalEquip + equipTot[k]
            lvb_data['Equipment-Total'] = equipTot
            lvb_df = lvb_data

            BGArea = 0 # stores below grade area.
            AGArea = 0 # stores above grade area.
            # calculate Above Grade Area and Below Grade Area.
            for ele in range(0,len(l3)):
                if l3[ele] == 'AG':
                    AGArea = AGArea + lvb_data['AREA'][ele]
                else:
                    BGArea = BGArea + lvb_data['AREA'][ele]
            if 'Peninsula' in name:
                lvb_df['BUILDING-TYPE'] = 0
        
        return lvb_df
    
def _comapre_LVB_INP_report(name1, path):
    # Open the .inp file for reading
    with open(name1) as f:
        # Read each line of the file
        flist = f.readlines()
        sys_count = []
        for num, line in enumerate(flist, 0):
            if 'Systems / Zones' in line:
                sys_count.append(num)
            if 'Metering & Misc HVAC' in line:
                numend = num
        numstart = sys_count[0] 
        sys_rpt = flist[numstart:numend]

        sys_str = []
        for line in sys_rpt:
            if (('=' in line and 'ZONE' in line and 'ZONE-' not in line and '-ZONE' not in line)
                or ('=' in line and 'CONDITIONED' in line and '-CONDITIONED' not in line and 'CONDITIONED-' not in line)
                or ('=' in line and 'SPACE' in line and 'SPACE-' not in line and '-SPACE' not in line)):
                sys_str.append(line)

        # Initialize lists to store extracted information
        zones = []
        types = []
        spaces = []

        # Iterate through data to extract information
        i = 0
        while i < len(sys_str) - 2:
            if "ZONE" in sys_str[i]:
                zones.append(sys_str[i])  # Extract zone name
                types.append(sys_str[i + 1])  # Extract zone type
                spaces.append(sys_str[i + 2])  # Extract zone space
                i += 3  # Move to the next zone
            else:
                i += 1  # Move to the next line if it's not a zone

        # Create a DataFrame from the extracted information
        sys_df = pd.DataFrame({'SPACE': spaces, 'TYPE': types})

        # clean the values in the columns
        sys_df['SPACE'] = sys_df['SPACE'].str.strip().str.replace('"', '').str.replace('=', '').str.replace('SPACE', '')
        sys_df['TYPE'] = sys_df['TYPE'].str.strip().str.replace('\n', '').str.replace('\t', '').str.replace('=', '').str.replace('TYPE', '')
        # sys_df['ZONE'] = sys_df['ZONE'].str.strip().str.replace('"', '').str.replace('=', '').str.replace('ZONE', '')

        lvbfiles = gb.glob(f'{path}/*_lvb.csv', recursive=True)
        # Iterate through lvbfiles and lvdfiles simultaneously using zip
        for lvbfile in lvbfiles:
            lvb_data = pd.read_csv(lvbfile)

            # Remove leading spaces from values in column 'SPACE'
            lvb_data['SPACE'] = lvb_data['SPACE'].str.strip()
            sys_df['SPACE'] = sys_df['SPACE'].str.strip()
            sys_df['TYPE'] = sys_df['TYPE'].str.strip()

            # copying lvb_data to lvb_df
            lvb_df = lvb_data

            merged_df = pd.merge(lvb_df, sys_df, on='SPACE', how='inner')
            matched_values_list = merged_df['TYPE'].tolist()
            lvb_df['BUILDING-TYPE'] = matched_values_list
           
    return lvb_df

